using Rapicgen.Core.Logging;
using Rapicgen.Core.Options.Refitter;
using Refitter.Core;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;

namespace Rapicgen.Core.Generators.Refitter;

public class RefitterCodeGenerator : ICodeGenerator
{
    private readonly string inputFile;
    private readonly string defaultNamespace;
    private readonly IRefitterOptions options;

    public RefitterCodeGenerator(
        string swaggerFile,
        string defaultNamespace,
        IRefitterOptions options)
    {
        this.inputFile = swaggerFile;
        this.defaultNamespace = defaultNamespace;
        this.options = options;
    }

    [SuppressMessage(
        "Usage",
        "VSTHRD002:Avoid problematic synchronous waits",
        Justification = "This is run from a Visual Studio CustomTool")]
    public string GenerateCode(IProgressReporter? pGenerateProgress)
    {
        pGenerateProgress?.Progress(10);

        RefitGeneratorSettings settings;
        if (inputFile.EndsWith(".refitter"))
        {
            settings = Serializer
                .Deserialize<RefitGeneratorSettings>(
                    File.ReadAllText(inputFile));
        }
        else
        {
            var fileInfo = new FileInfo(inputFile);
            var refitterFile = fileInfo.Name.Replace(fileInfo.Extension, ".refitter");
            if (File.Exists(refitterFile))
            {
                settings = Serializer.Deserialize<RefitGeneratorSettings>(
                    File.ReadAllText(refitterFile)
                );
            }
            else
            {
                settings = new RefitGeneratorSettings
                {
                    OpenApiPath = inputFile,
                    Namespace = defaultNamespace,
                    AddAutoGeneratedHeader = options.AddAutoGeneratedHeader,
                    GenerateContracts = options.GenerateContracts,
                    GenerateXmlDocCodeComments = options.GenerateXmlDocCodeComments,
                    ReturnIApiResponse = options.ReturnIApiResponse,
                    UseCancellationTokens = options.UseCancellationTokens,
                    GenerateOperationHeaders = options.GenerateHeaderParameters,
                    GenerateMultipleFiles = options.GenerateMultipleFiles
                };

                File.WriteAllText(
                    Path.Combine(
                        fileInfo.Directory.FullName,
                        fileInfo.Name.Replace(fileInfo.Extension, ".refitter")),
                    Serialize(settings));
            }
        }

        var generator = Task
            .Run(() =>
            {
                Directory.SetCurrentDirectory(Path.GetDirectoryName(inputFile));
                return RefitGenerator.CreateAsync(settings);
            })
            .GetAwaiter()
            .GetResult();

        pGenerateProgress?.Progress(50);
        using var context = new DependencyContext("Refitter", Serialize(settings));

        if (settings.GenerateMultipleFiles)
        {
            var fileInfo = new FileInfo(inputFile);
            var outputFolder = fileInfo.Directory.FullName;
            if (settings.OutputFolder != RefitGeneratorSettings.DefaultOutputFolder)
            {
                outputFolder = Path.Combine(outputFolder, settings.OutputFolder);
                if (!Directory.Exists(outputFolder))
                {
                    Directory.CreateDirectory(outputFolder);
                }
            }

            var results = generator.GenerateMultipleFiles();
            foreach (var file in results.Files)
            {
                File.WriteAllText(Path.Combine(outputFolder, file.Filename), file.Content);
            }

            return string.Empty;
        }
        else
        {
            var code = generator.Generate();
            context.Succeeded();

            pGenerateProgress?.Progress(90);
            var output = GeneratedCode.PrefixAutogeneratedCodeHeader(code, "Refitter", "v1.6.2");

            if (inputFile.EndsWith(".refitter"))
            {
                var fileInfo = new FileInfo(inputFile);
                var outputFolder = fileInfo.Directory.FullName;
                if (settings.OutputFolder != RefitGeneratorSettings.DefaultOutputFolder)
                {
                    outputFolder = Path.Combine(outputFolder, settings.OutputFolder);
                    if (!Directory.Exists(outputFolder))
                    {
                        Directory.CreateDirectory(outputFolder);
                    }
                }

                File.WriteAllText(
                    Path.Combine(outputFolder, fileInfo.Name.Replace(fileInfo.Extension, ".cs")),
                    output
                );
            }

            return output;
        }
    }

    private static string Serialize(RefitGeneratorSettings settings)
    {
        return JsonSerializer.Serialize(
            settings,
            new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                WriteIndented = true
            });
    }
}
